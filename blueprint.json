{"software":{"name":"mediadrop","minor":1,"release_level":"Beta","license_name":"gnu_general_public_license_v3","license_label":"GNU GENERAL PUBLIC LICENSE V3","license_sourceurl":"http://www.gnu.org/copyleft/gpl.html","full_title":"MediaDrop","short_title":"MediaDrop","description":"The Web's Open Source Video Platform","icon_url":"http://mediadrop.net/images/layout/logo.jpg","home_page_url":"http://mediadrop.net/","about":"MediaDrop is a media-oriented content manager previously known as “MediaCore CE”","language":"python","framework":"python","deployment_type":"web","publisher":"engines","required_memory":128,"recommended_memory":256,"http_protocol":"http_and_https","framework_port_overide":8080,"custom_start_script":"\r\nwhoami\r\nls -la /usr/local/lib/python2.7/dist-packages/\r\nls -lRa /usr/local/lib/python2.7/dist-packages/WebError-0.10.3-py2.7.egg\r\nmkdir -p /usr/local/lib/python2.7/dist-packages/WebError-0.10.3-py2.7.egg/weberror/EGG-INFO\r\npaster serve --reload deployment.ini","custom_install_script":"cd /home/app\r\npython setup.py develop\r\npaster make-config MediaDrop deployment.ini\r\ncp -rp data/* /home/fs/data\r\nls -la\r\ncat deployment.ini\r\npaster setup-app deployment.ini\r\nmysql -h _Engines_System(mysql_host) -u $dbuser $dbname --password=$dbpasswd \u003c setup_triggers.sql\r\nwhoami\r\nchmod g+w -R /usr/local/lib/python2.7/dist-packages/\r\n","service_configurations":[{"publisher_namespace":"EnginesSystem","type_path":"database/sql/mysql","variables":{"full_access":"false","name":"_Engines_Builder(engine_name)","database_host":"_Engines_System(mysql_host)","database_name":"_Engines_Builder(engine_name)","db_username":"_Engines_Builder(engine_name)","db_password":"_Engines_System(random(10))","db_flavor":"mysql2","collation":"utf8_general_ci"}},{"publisher_namespace":"EnginesSystem","type_path":"filesystem/local/filesystem","variables":{"user":"_Engines_Builder(data_uid)","group":"_Engines_Builder(group_uid)","name":"_Engines_Builder(engine_name)","volume_src":" ","permissions":"rw","engine_path":"data"}}],"persistent_directories":[{"path":"app/data"}],"installed_packages":[{"name":"MediaCore-0.10.3.tar.gz","source_url":"http://static.mediadrop.net/releases/MediaCore-0.10.3.tar.gz","destination":"./","extraction_command":"tar -xpf","path_to_extracted":"MediaCore-0.10.3"}],"system_packages":[{"package":"libfreetype6-dev"}],"template_files":[{"title":"deployment.ini","path":"app/deployment.ini","content":"#\r\n# MediaDrop - Pylons development environment configuration\r\n#\r\n# The %(here)s variable will be replaced with the parent directory of this file\r\n#\r\n# IMPORTANT NOTE!!  Do NOT use this config for any kind of production environ.\r\n#                   Generate a new, production-safe config with this command:\r\n#                     $ paster make-config MediaCore production.ini\r\n[DEFAULT]\r\n# WARNING == If debug is not set to false, you'll get the interactive\r\n# debugger on production, which is a huge security hole.\r\ndebug = false\r\n\r\n# Dont send error notifications by email when developing. That'd be annoying.\r\n#email_to = you@yourdomain.com\r\nsmtp_server = smtp.engines.internal\r\nerror_email_from = paste@localhost\r\n\r\n[server:main]\r\nuse = egg:Paste#http\r\nhost = 0.0.0.0\r\nport = 8080\r\n\r\n[app:main]\r\n# Specify the database for SQLAlchemy to use\r\nsqlalchemy.url = mysql://_Engines_Environment(dbuser):_Engines_Environment(dbpasswd)@_Engines_System(mysql_host)/_Engines_Environment(dbname)?charset=utf8\u0026use_unicode=0\r\nsqlalchemy.echo = False\r\nsqlalchemy.pool_recycle = 3600\r\n# useful for plugin developers: log an error if you open extra db connections\r\n# which are not returned to the connection pool by the end of the request.\r\ndb.check_for_leaked_connections = True\r\n\r\n# Permission policies to restrict admin/media access. By default all \r\n# permissions are bound to groups and a user can either view all media or none.\r\n# custom plugins can implement more fine-grained policies (e.g. restrict view\r\n# access to media in a specific category)\r\npermission_policies = GroupBasedPermissionsPolicy\r\n\r\n# Session salts.\r\nbeaker.session.secret = '_Engines_System(random(16))'\r\nsa_auth.cookie_secret = '_Engines_System(random(16))'\r\n\r\n# Specify an optional prefix for table names.\r\n# Use this if you want to put MediaDrop in the same database as another app.\r\n# XXX: If you use this setting and you want to enable search, you'll have\r\n#      to manually edit setup_triggers.sql to include this prefix.\r\n# e.g. if you want your tables to be named like 'mcore_media', you should set:\r\n# db_table_prefix = mcore\r\n\r\n# mod_proxy settings (untested)\r\n# Use this if you are hosting MediaDrop behind a proxy.\r\n# e.g. If hosting MediaDrop via mod_proxy at the URL\r\n#      yoursite.com/my_proxied_mediadrop/, such that all requests are passed\r\n#      through to a Paste server at localhost:8080/, you should set:\r\n# proxy_prefix = /my_proxied_mediadrop\r\n\r\n# Method to use when servng static media files.\r\n#   apache_xsendfile - requires Apache 2.x and mod_xsendfile\r\n#   nginx_redirect - requires nginx and the creation of an internal location\r\n#                    block with an alias from the path __mediacore_serve__ to\r\n#                    your /path/to/data/media directory.\r\n#                    See the full docs below for an example:\r\n#                    http://mediadrop.net/docs/install/nginx-uwsgi.html\r\n#   default - uses environ['wsgi.file_wrapper'] if it's provided by the server,\r\n#             otherwise a pure-python file iterator returns the file in chunks\r\nfile_serve_method = default\r\n\r\n# Enable automatic gzip compresson for all html/css/js/json responses.\r\n# Keep this enabled unless you're serving MediaDrop via Apache and you\r\n# are able to enable gzip there instead.\r\nenable_gzip = true\r\n\r\n# Data paths (your server user must be able to write to these paths!)\r\ncache_dir = /home/fs/data\r\nimage_dir = /home/fs/data/images\r\nmedia_dir = /home/fs/data/media\r\n\r\n# Files can be moved to a trash-like folder instead of being deleted\r\n# permanently from the filesystem. Uncomment the line below to enable this:\r\n#deleted_files_dir = /home/fs/data/deleted\r\n\r\n# If you'd like to fine-tune the individual locations of the cache data dirs\r\n# for the Cache data, or the Session saves, un-comment the desired settings\r\n# here:\r\n#beaker.cache.data_dir = %(here)s/data/cache\r\n#beaker.session.data_dir = %(here)s/data/sessions\r\n\r\n# Specify the layout template name to wrap core MediaDrop output in\r\nlayout_template = layout\r\n# Defines an external genshi template to wrap the output (including layout) in\r\nexternal_template = false\r\nexternal_template_name = external\r\nexternal_template_url = http://some/valid_genshi_template.html\r\nexternal_template_timeout = 600\r\n\r\n# Misc app instance settings\r\nuse = egg:MediaCore\r\nfull_stack = true\r\nstatic_files = true\r\napp_instance_uuid = {2673572c-6fb8-405e-89ed-00e2d4192faa}\r\nbeaker.session.key = mediacore\r\n\r\n# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*\r\n# Debug mode will enable the interactive debugging tool, allowing ANYONE to\r\n# execute malicious code after an exception is raised.\r\n#set debug = false\r\n\r\n\r\n# Logging configuration\r\n# Add additional loggers, handlers, formatters here\r\n# Uses python's logging config file format\r\n# http://docs.python.org/lib/logging-config-fileformat.html\r\n\r\n[loggers]\r\nkeys = root, routes, mediadrop, sqlalchemy, auth\r\n\r\n[handlers]\r\nkeys = console, wsgierrors\r\n# To enable a MediaDrop-specific logfile, see the [handler_logfile] setting\r\n# below, and add 'logfile' to the list of keys, like so\r\n# keys = console, wsgierrors, logfile\r\n\r\n[formatters]\r\nkeys = generic\r\n\r\n# If you create additional loggers, add them as a key to [loggers]\r\n[logger_root]\r\nlevel = INFO\r\nhandlers = console\r\n\r\n[logger_routes]\r\nlevel = INFO\r\nhandlers =\r\nqualname = routes.middleware\r\n# \"level = DEBUG\" logs the route matched and routing variables.\r\n\r\n[logger_mediadrop]\r\nlevel = INFO\r\nhandlers =\r\nqualname = mediacore\r\n\r\n[logger_sqlalchemy]\r\nlevel = WARN\r\nhandlers =\r\nqualname = sqlalchemy.engine\r\n# \"level = INFO\" logs SQL queries.\r\n# \"level = DEBUG\" logs SQL queries and results.\r\n# \"level = WARN\" logs neither.  (Recommended for production systems.)\r\n\r\n# A logger for authentication, identification and authorization -- this is\r\n# repoze.who and repoze.what:\r\n[logger_auth]\r\nlevel = WARN\r\nhandlers =\r\nqualname = auth\r\n\r\n# If you create additional handlers, add them as a key to [handlers]\r\n[handler_console]\r\nclass = StreamHandler\r\nargs = (sys.stderr,)\r\nlevel = NOTSET\r\nformatter = generic\r\n\r\n[handler_wsgierrors]\r\n# Handler for logging to the WSGI error handler (eg. apache's error log)\r\nclass = pylons.log.WSGIErrorsHandler\r\nargs = ()\r\nlevel = NOTSET\r\nformat = generic\r\n\r\n[handler_logfile]\r\n# Handler for logging to a dedicated logfile. To use this, see the [handlers]\r\n# section above; ensure the logfile you name is writeable by your server user.\r\nclass = FileHandler\r\nargs = ('/var/log/deployment.log','a')\r\nlevel = NOTSET\r\nformatter = generic\r\n\r\n# If you create additional formatters, add them as a key to [formatters]\r\n\r\n# If you create additional formatters, add them as a key to [formatters]\r\n[formatter_generic]\r\nformat = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s\r\ndatefmt = %H:%M:%S"}],"file_write_permissions":[{"path":"/","recursive":true}],"installation_report_template":"goto _Engines_Builder(http_protocol)://_Engines_Builder(fqdn)/ and follow the wizard to complete the install \r\nlogin as admin admin"}}